"use strict";(()=>{(self.webpackChunkapp=self.webpackChunkapp||[]).push([[1410],{54733:function(ce,P,w){w.d(P,{i:function(){return u}});var O=w(7502),D=w(85329),k=w(23531),f=w.n(k),A=w(78084);async function y(e,s){const c=G(e,s.auth);if(c)return c;const{data:p}=await(0,A.TG)({clientType:e.clientType,clientId:e.clientId,request:s.request||e.request,scopes:s.auth.scopes||e.scopes});await e.onVerification(p);const a=await b(s.request||e.request,e.clientId,e.clientType,p);return e.authentication=a,a}function G(e,s){if(s.refresh===!0||!e.authentication)return!1;if(e.clientType==="github-app")return e.authentication;const c=e.authentication,p=("scopes"in s&&s.scopes||e.scopes).join(" "),a=c.scopes.join(" ");return p===a?c:!1}async function C(e){await new Promise(s=>setTimeout(s,e*1e3))}async function b(e,s,c,p){try{const a={clientId:s,request:e,code:p.device_code},{authentication:h}=c==="oauth-app"?await(0,A.i7)({...a,clientType:"oauth-app"}):await(0,A.i7)({...a,clientType:"github-app"});return{type:"token",tokenType:"oauth",...h}}catch(a){if(!a.response)throw a;const h=a.response.data.error;if(h==="authorization_pending")return await C(p.interval),b(e,s,c,p);if(h==="slow_down")return await C(p.interval+5),b(e,s,c,p);throw a}}async function R(e,s){return y(e,{auth:s})}async function j(e,s,c,p){let a=s.endpoint.merge(c,p);if(/\/login\/(oauth\/access_token|device\/code)$/.test(a.url))return s(a);const{token:h}=await y(e,{request:s,auth:{type:"oauth"}});return a.headers.authorization=`token ${h}`,s(a)}const L="3.1.2";function H(e){const s=e.request||D.request.defaults({headers:{"user-agent":`octokit-auth-oauth-device.js/${L} ${(0,O.i)()}`}}),{request:c=s,...p}=e,a=e.clientType==="github-app"?{...p,clientType:"github-app",request:c}:{...p,clientType:"oauth-app",request:c,scopes:e.scopes||[]};if(!e.clientId)throw new Error('[@octokit/auth-oauth-device] "clientId" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');if(!e.onVerification)throw new Error('[@octokit/auth-oauth-device] "onVerification" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');return Object.assign(R.bind(null,a),{hook:j.bind(null,a)})}const F="1.3.0";async function q(e){if("code"in e.strategyOptions){const{authentication:s}=await(0,A.yi)({clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,...e.strategyOptions,request:e.request});return{type:"token",tokenType:"oauth",...s}}if("onVerification"in e.strategyOptions){const c=await H({clientType:e.clientType,clientId:e.clientId,...e.strategyOptions,request:e.request})({type:"oauth"});return{clientSecret:e.clientSecret,...c}}if("token"in e.strategyOptions)return{type:"token",tokenType:"oauth",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,...e.strategyOptions};throw new Error("[@octokit/auth-oauth-user] Invalid strategy options")}async function I(e,s={}){if(e.authentication||(e.authentication=e.clientType==="oauth-app"?await q(e):await q(e)),e.authentication.invalid)throw new Error("[@octokit/auth-oauth-user] Token is invalid");const c=e.authentication;if("expiresAt"in c&&(s.type==="refresh"||new Date(c.expiresAt)<new Date)){const{authentication:p}=await(0,A.g$)({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:c.refreshToken,request:e.request});e.authentication={tokenType:"oauth",type:"token",...p}}if(s.type==="refresh"){if(e.clientType==="oauth-app")throw new Error("[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens");if(!c.hasOwnProperty("expiresAt"))throw new Error("[@octokit/auth-oauth-user] Refresh token missing")}if(s.type==="check"||s.type==="reset"){const p=s.type==="check"?A.a_:A.Eu;try{const{authentication:a}=await p({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request});return e.authentication={tokenType:"oauth",type:"token",...a},e.authentication}catch(a){throw a.status===404&&(a.message="[@octokit/auth-oauth-user] Token is invalid",e.authentication.invalid=!0),a}}if(s.type==="delete"||s.type==="deleteAuthorization"){const p=s.type==="delete"?A.pQ:A.sA;try{await p({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request})}catch(a){if(a.status!==404)throw a}return e.authentication.invalid=!0,e.authentication}return e.authentication}const V=/\/applications\/[^/]+\/(token|grant)s?/;function B(e){return e&&V.test(e)}async function te(e,s,c,p={}){const a=s.endpoint.merge(c,p);if(/\/login\/(oauth\/access_token|device\/code)$/.test(a.url))return s(a);if(B(a.url)){const _=f()(`${e.clientId}:${e.clientSecret}`);return a.headers.authorization=`basic ${_}`,s(a)}const{token:h}=e.clientType==="oauth-app"?await I({...e,request:s}):await I({...e,request:s});return a.headers.authorization="token "+h,s(a)}function M({clientId:e,clientSecret:s,clientType:c="oauth-app",request:p=D.request.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${F} ${(0,O.i)()}`}}),...a}){const h=Object.assign({clientType:c,clientId:e,clientSecret:s,strategyOptions:a,request:p});return Object.assign(I.bind(null,h),{hook:te.bind(null,h)})}M.VERSION=F;async function W(e,s){if(s.type==="oauth-app")return{type:"oauth-app",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,headers:{authorization:`basic ${f()(`${e.clientId}:${e.clientSecret}`)}`}};if("factory"in s){const{type:a,...h}={...s,...e};return s.factory(h)}const c={clientId:e.clientId,clientSecret:e.clientSecret,request:e.request,...s};return(e.clientType==="oauth-app"?await M({...c,clientType:e.clientType}):await M({...c,clientType:e.clientType}))()}async function K(e,s,c,p){let a=s.endpoint.merge(c,p);if(/\/login\/(oauth\/access_token|device\/code)$/.test(a.url))return s(a);if(e.clientType==="github-app"&&!B(a.url))throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${a.method} ${a.url}" is not supported.`);const h=f()(`${e.clientId}:${e.clientSecret}`);a.headers.authorization=`basic ${h}`;try{return await s(a)}catch(_){throw _.status!==401||(_.message=`[@octokit/auth-oauth-app] "${a.method} ${a.url}" does not support clientId/clientSecret basic authentication.`),_}}const Q="4.3.0";function ee(e){const s=Object.assign({request:D.request.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${Q} ${(0,O.i)()}`}}),clientType:"oauth-app"},e);return Object.assign(W.bind(null,s),{hook:K.bind(null,s)})}var oe=w(91346),ie=w(6990),J=w(77105),X=w.n(J);async function $({appId:e,privateKey:s,timeDifference:c}){try{const p=await(0,ie.C)({id:+e,privateKey:s,now:c&&Math.floor(Date.now()/1e3)+c});return{type:"app",token:p.token,appId:p.appId,expiresAt:new Date(p.expiration*1e3).toISOString()}}catch(p){throw s==="-----BEGIN RSA PRIVATE KEY-----"?new Error("The 'privateKey` option contains only the first line '-----BEGIN RSA PRIVATE KEY-----'. If you are setting it using a `.env` file, make sure it is set on a single line with newlines replaced by '\n'"):p}}function n(){return new(X())({max:15e3,maxAge:1e3*60*59})}async function T(e,s){const c=g(s),p=await e.get(c);if(!p)return;const[a,h,_,S,U,Z]=p.split("|"),x=s.permissions||U.split(/,/).reduce((re,se)=>(/!$/.test(se)?re[se.slice(0,-1)]="write":re[se]="read",re),{});return{token:a,createdAt:h,expiresAt:_,permissions:x,repositoryIds:s.repositoryIds,repositoryNames:s.repositoryNames,singleFileName:Z,repositorySelection:S}}async function m(e,s,c){const p=g(s),a=s.permissions?"":Object.keys(c.permissions).map(_=>`${_}${c.permissions[_]==="write"?"!":""}`).join(","),h=[c.token,c.createdAt,c.expiresAt,c.repositorySelection,a,c.singleFileName].join("|");await e.set(p,h)}function g({installationId:e,permissions:s={},repositoryIds:c=[],repositoryNames:p=[]}){const a=Object.keys(s).sort().map(S=>s[S]==="read"?S:`${S}!`).join(","),h=c.sort().join(","),_=p.join(",");return[e,h,_,a].filter(Boolean).join("|")}function E({installationId:e,token:s,createdAt:c,expiresAt:p,repositorySelection:a,permissions:h,repositoryIds:_,repositoryNames:S,singleFileName:U}){return Object.assign({type:"token",tokenType:"installation",token:s,installationId:e,permissions:h,createdAt:c,expiresAt:p,repositorySelection:a},_?{repositoryIds:_}:null,S?{repositoryNames:S}:null,U?{singleFileName:U}:null)}async function v(e,s,c){const p=Number(s.installationId||e.installationId);if(!p)throw new Error("[@octokit/auth-app] installationId option is required for installation authentication.");if(s.factory){const{type:ne,factory:pe,oauthApp:he,...ue}={...e,...s};return pe(ue)}const a=Object.assign({installationId:p},s);if(!s.refresh){const ne=await T(e.cache,a);if(ne){const{token:pe,createdAt:he,expiresAt:ue,permissions:Ee,repositoryIds:we,repositoryNames:_e,singleFileName:be,repositorySelection:fe}=ne;return E({installationId:p,token:pe,createdAt:he,expiresAt:ue,permissions:Ee,repositorySelection:fe,repositoryIds:we,repositoryNames:_e,singleFileName:be})}}const h=await $(e),_=c||e.request,{data:{token:S,expires_at:U,repositories:Z,permissions:x,repository_selection:re,single_file:se}}=await _("POST /app/installations/{installation_id}/access_tokens",{installation_id:p,repository_ids:s.repositoryIds,repositories:s.repositoryNames,permissions:s.permissions,mediaType:{previews:["machine-man"]},headers:{authorization:`bearer ${h.token}`}}),le=x||{},de=re||"all",me=Z?Z.map(ne=>ne.id):void 0,ge=Z?Z.map(ne=>ne.name):void 0,Te=new Date().toISOString();return await m(e.cache,a,{token:S,createdAt:Te,expiresAt:U,repositorySelection:de,permissions:le,repositoryIds:me,repositoryNames:ge,singleFileName:se}),E({installationId:p,token:S,createdAt:Te,expiresAt:U,repositorySelection:de,permissions:le,repositoryIds:me,repositoryNames:ge,singleFileName:se})}async function z(e,s){switch(s.type){case"app":return $(e);case"oauth":e.log.warn(new oe.$('[@octokit/auth-app] {type: "oauth"} is deprecated. Use {type: "oauth-app"} instead'));case"oauth-app":return e.oauthApp({type:"oauth-app"});case"installation":return v(e,{...s,type:"installation"});case"oauth-user":return e.oauthApp(s);default:throw new Error(`Invalid auth type: ${s.type}`)}}const N=["/app","/app/hook/config","/app/hook/deliveries","/app/hook/deliveries/{delivery_id}","/app/hook/deliveries/{delivery_id}/attempts","/app/installations","/app/installations/{installation_id}","/app/installations/{installation_id}/access_tokens","/app/installations/{installation_id}/suspended","/marketplace_listing/accounts/{account_id}","/marketplace_listing/plan","/marketplace_listing/plans","/marketplace_listing/plans/{plan_id}/accounts","/marketplace_listing/stubbed/accounts/{account_id}","/marketplace_listing/stubbed/plan","/marketplace_listing/stubbed/plans","/marketplace_listing/stubbed/plans/{plan_id}/accounts","/orgs/{org}/installation","/repos/{owner}/{repo}/installation","/users/{username}/installation"];function Y(e){const c=`^(?:${e.map(p=>p.split("/").map(a=>a.startsWith("{")?"(?:.+?)":a).join("/")).map(p=>`(?:${p})`).join("|")})[^/]*$`;return new RegExp(c,"i")}const ae=Y(N);function o(e){return!!e&&ae.test(e)}const l=5*1e3;function r(e){return!(e.message.match(/'Expiration time' claim \('exp'\) must be a numeric value representing the future time at which the assertion expires/)||e.message.match(/'Issued at' claim \('iat'\) must be an Integer representing the time that the assertion was issued/))}async function t(e,s,c,p){const a=s.endpoint.merge(c,p),h=a.url;if(/\/login\/oauth\/access_token$/.test(h))return s(a);if(o(h.replace(s.endpoint.DEFAULTS.baseUrl,""))){const{token:U}=await $(e);a.headers.authorization=`bearer ${U}`;let Z;try{Z=await s(a)}catch(x){if(r(x)||typeof x.response.headers.date=="undefined")throw x;const re=Math.floor((Date.parse(x.response.headers.date)-Date.parse(new Date().toString()))/1e3);e.log.warn(x.message),e.log.warn(`[@octokit/auth-app] GitHub API time and system time are different by ${re} seconds. Retrying request with the difference accounted for.`);const{token:se}=await $({...e,timeDifference:re});return a.headers.authorization=`bearer ${se}`,s(a)}return Z}if(B(h)){const U=await e.oauthApp({type:"oauth-app"});return a.headers.authorization=U.headers.authorization,s(a)}const{token:_,createdAt:S}=await v(e,{},s);return a.headers.authorization=`token ${_}`,i(e,s,a,S)}async function i(e,s,c,p,a=0){const h=+new Date-+new Date(p);try{return await s(c)}catch(_){if(_.status!==401)throw _;if(h>=l)throw a>0&&(_.message=`After ${a} retries within ${h/1e3}s of creating the installation access token, the response remains 401. At this point, the cause may be an authentication problem or a system outage. Please check https://www.githubstatus.com for status information`),_;++a;const S=a*1e3;return e.log.warn(`[@octokit/auth-app] Retrying after 401 response to account for token replication delay (retry: ${a}, wait: ${S/1e3}s)`),await new Promise(U=>setTimeout(U,S)),i(e,s,c,p,a)}}const d="3.6.1";function u(e){if(!e.appId)throw new Error("[@octokit/auth-app] appId option is required");if(!e.privateKey)throw new Error("[@octokit/auth-app] privateKey option is required");if("installationId"in e&&!e.installationId)throw new Error("[@octokit/auth-app] installationId is set to a falsy value");const s=Object.assign({warn:console.warn.bind(console)},e.log),c=e.request||D.request.defaults({headers:{"user-agent":`octokit-auth-app.js/${d} ${(0,O.i)()}`}}),p=Object.assign({request:c,cache:n()},e,e.installationId?{installationId:Number(e.installationId)}:{},{log:s,oauthApp:ee({clientType:"github-app",clientId:e.clientId||"",clientSecret:e.clientSecret||"",request:c})});return Object.assign(z.bind(null,p),{hook:t.bind(null,p)})}},42469:function(ce,P,w){w.r(P),w.d(P,{oauthAuthorizationUrl:function(){return O}});function O(k){const f=k.clientType||"oauth-app",A=k.baseUrl||"https://github.com",y={clientType:f,allowSignup:k.allowSignup!==!1,clientId:k.clientId,login:k.login||null,redirectUrl:k.redirectUrl||null,state:k.state||Math.random().toString(36).substr(2),url:""};if(f==="oauth-app"){const G="scopes"in k?k.scopes:[];y.scopes=typeof G=="string"?G.split(/[,\s]+/).filter(Boolean):G}return y.url=D(`${A}/login/oauth/authorize`,y),y}function D(k,f){const A={allowSignup:"allow_signup",clientId:"client_id",login:"login",redirectUrl:"redirect_uri",scopes:"scope",state:"state"};let y=k;return Object.keys(A).filter(G=>f[G]!==null).filter(G=>G!=="scopes"?!0:f.clientType==="github-app"?!1:!Array.isArray(f[G])||f[G].length>0).map(G=>[A[G],`${f[G]}`]).forEach(([G,C],b)=>{y+=b===0?"?":"&",y+=`${G}=${encodeURIComponent(C)}`}),y}},78084:function(ce,P,w){var O;O={value:!0};function D(n){return n&&typeof n=="object"&&"default"in n?n.default:n}var k=w(42469),f=w(85329),A=w(29717),y=D(w(23531));const G="1.2.6";function C(n,T){var m=Object.keys(n);if(Object.getOwnPropertySymbols){var g=Object.getOwnPropertySymbols(n);T&&(g=g.filter(function(E){return Object.getOwnPropertyDescriptor(n,E).enumerable})),m.push.apply(m,g)}return m}function b(n){for(var T=1;T<arguments.length;T++){var m=arguments[T]!=null?arguments[T]:{};T%2?C(Object(m),!0).forEach(function(g){R(n,g,m[g])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(m)):C(Object(m)).forEach(function(g){Object.defineProperty(n,g,Object.getOwnPropertyDescriptor(m,g))})}return n}function R(n,T,m){return T in n?Object.defineProperty(n,T,{value:m,enumerable:!0,configurable:!0,writable:!0}):n[T]=m,n}function j(n,T){if(n==null)return{};var m={},g=Object.keys(n),E,v;for(v=0;v<g.length;v++)E=g[v],!(T.indexOf(E)>=0)&&(m[E]=n[E]);return m}function L(n,T){if(n==null)return{};var m=j(n,T),g,E;if(Object.getOwnPropertySymbols){var v=Object.getOwnPropertySymbols(n);for(E=0;E<v.length;E++)g=v[E],!(T.indexOf(g)>=0)&&(!Object.prototype.propertyIsEnumerable.call(n,g)||(m[g]=n[g]))}return m}function H(n){const T=n.endpoint.DEFAULTS;return/^https:\/\/(api\.)?github\.com$/.test(T.baseUrl)?"https://github.com":T.baseUrl.replace("/api/v3","")}async function F(n,T,m){const g=b({baseUrl:H(n),headers:{accept:"application/json"}},m),E=await n(T,g);if("error"in E.data){const v=new A.RequestError(`${E.data.error_description} (${E.data.error}, ${E.data.error_uri})`,400,{request:n.endpoint.merge(T,g),headers:E.headers});throw v.response=E,v}return E}const q=["request"];function I(n){let{request:T=f.request}=n,m=L(n,q);const g=H(T);return k.oauthAuthorizationUrl(b(b({},m),{},{baseUrl:g}))}async function V(n){const T=n.request||f.request,m=await F(T,"POST /login/oauth/access_token",{client_id:n.clientId,client_secret:n.clientSecret,code:n.code,redirect_uri:n.redirectUrl}),g={clientType:n.clientType,clientId:n.clientId,clientSecret:n.clientSecret,token:m.data.access_token,scopes:m.data.scope.split(/\s+/).filter(Boolean)};if(n.clientType==="github-app"){if("refresh_token"in m.data){const E=new Date(m.headers.date).getTime();g.refreshToken=m.data.refresh_token,g.expiresAt=B(E,m.data.expires_in),g.refreshTokenExpiresAt=B(E,m.data.refresh_token_expires_in)}delete g.scopes}return b(b({},m),{},{authentication:g})}function B(n,T){return new Date(n+T*1e3).toISOString()}async function te(n){const T=n.request||f.request,m={client_id:n.clientId};return"scopes"in n&&Array.isArray(n.scopes)&&(m.scope=n.scopes.join(" ")),F(T,"POST /login/device/code",m)}async function M(n){const T=n.request||f.request,m=await F(T,"POST /login/oauth/access_token",{client_id:n.clientId,device_code:n.code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}),g={clientType:n.clientType,clientId:n.clientId,token:m.data.access_token,scopes:m.data.scope.split(/\s+/).filter(Boolean)};if("clientSecret"in n&&(g.clientSecret=n.clientSecret),n.clientType==="github-app"){if("refresh_token"in m.data){const E=new Date(m.headers.date).getTime();g.refreshToken=m.data.refresh_token,g.expiresAt=W(E,m.data.expires_in),g.refreshTokenExpiresAt=W(E,m.data.refresh_token_expires_in)}delete g.scopes}return b(b({},m),{},{authentication:g})}function W(n,T){return new Date(n+T*1e3).toISOString()}async function K(n){const m=await(n.request||f.request)("POST /applications/{client_id}/token",{headers:{authorization:`basic ${y(`${n.clientId}:${n.clientSecret}`)}`},client_id:n.clientId,access_token:n.token}),g={clientType:n.clientType,clientId:n.clientId,clientSecret:n.clientSecret,token:n.token,scopes:m.data.scopes};return m.data.expires_at&&(g.expiresAt=m.data.expires_at),n.clientType==="github-app"&&delete g.scopes,b(b({},m),{},{authentication:g})}async function Q(n){const T=n.request||f.request,m=await F(T,"POST /login/oauth/access_token",{client_id:n.clientId,client_secret:n.clientSecret,grant_type:"refresh_token",refresh_token:n.refreshToken}),g=new Date(m.headers.date).getTime(),E={clientType:"github-app",clientId:n.clientId,clientSecret:n.clientSecret,token:m.data.access_token,refreshToken:m.data.refresh_token,expiresAt:ee(g,m.data.expires_in),refreshTokenExpiresAt:ee(g,m.data.refresh_token_expires_in)};return b(b({},m),{},{authentication:E})}function ee(n,T){return new Date(n+T*1e3).toISOString()}const oe=["request","clientType","clientId","clientSecret","token"];async function ie(n){const{request:T,clientType:m,clientId:g,clientSecret:E,token:v}=n,z=L(n,oe),N=await(T||f.request)("POST /applications/{client_id}/token/scoped",b({headers:{authorization:`basic ${y(`${g}:${E}`)}`},client_id:g,access_token:v},z)),Y=Object.assign({clientType:m,clientId:g,clientSecret:E,token:N.data.token},N.data.expires_at?{expiresAt:N.data.expires_at}:{});return b(b({},N),{},{authentication:Y})}async function J(n){const T=n.request||f.request,m=y(`${n.clientId}:${n.clientSecret}`),g=await T("PATCH /applications/{client_id}/token",{headers:{authorization:`basic ${m}`},client_id:n.clientId,access_token:n.token}),E={clientType:n.clientType,clientId:n.clientId,clientSecret:n.clientSecret,token:g.data.token,scopes:g.data.scopes};return g.data.expires_at&&(E.expiresAt=g.data.expires_at),n.clientType==="github-app"&&delete E.scopes,b(b({},g),{},{authentication:E})}async function X(n){const T=n.request||f.request,m=y(`${n.clientId}:${n.clientSecret}`);return T("DELETE /applications/{client_id}/token",{headers:{authorization:`basic ${m}`},client_id:n.clientId,access_token:n.token})}async function $(n){const T=n.request||f.request,m=y(`${n.clientId}:${n.clientSecret}`);return T("DELETE /applications/{client_id}/grant",{headers:{authorization:`basic ${m}`},client_id:n.clientId,access_token:n.token})}O=G,P.a_=K,P.TG=te,P.sA=$,P.pQ=X,P.i7=M,P.yi=V,O=I,P.g$=Q,P.Eu=J,O=ie},29717:function(ce,P,w){w.r(P),w.d(P,{RequestError:function(){return y}});var O=w(91346),D=w(29928),k=w.n(D);const f=k()(G=>console.warn(G)),A=k()(G=>console.warn(G));class y extends Error{constructor(C,b,R){super(C),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=b;let j;"headers"in R&&typeof R.headers!="undefined"&&(j=R.headers),"response"in R&&(this.response=R.response,j=R.response.headers);const L=Object.assign({},R.request);R.request.headers.authorization&&(L.headers=Object.assign({},R.request.headers,{authorization:R.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),L.url=L.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=L,Object.defineProperty(this,"code",{get(){return f(new O.$("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),b}}),Object.defineProperty(this,"headers",{get(){return A(new O.$("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),j||{}}})}}},85329:function(ce,P,w){w.r(P),w.d(P,{request:function(){return ae}});/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */function O(o){return Object.prototype.toString.call(o)==="[object Object]"}function D(o){var l,r;return O(o)===!1?!1:(l=o.constructor,l===void 0?!0:(r=l.prototype,!(O(r)===!1||r.hasOwnProperty("isPrototypeOf")===!1)))}var k=w(7502);function f(o){return o?Object.keys(o).reduce((l,r)=>(l[r.toLowerCase()]=o[r],l),{}):{}}function A(o,l){const r=Object.assign({},o);return Object.keys(l).forEach(t=>{D(l[t])?t in o?r[t]=A(o[t],l[t]):Object.assign(r,{[t]:l[t]}):Object.assign(r,{[t]:l[t]})}),r}function y(o){for(const l in o)o[l]===void 0&&delete o[l];return o}function G(o,l,r){if(typeof l=="string"){let[i,d]=l.split(" ");r=Object.assign(d?{method:i,url:d}:{url:i},r)}else r=Object.assign({},l);r.headers=f(r.headers),y(r),y(r.headers);const t=A(o||{},r);return o&&o.mediaType.previews.length&&(t.mediaType.previews=o.mediaType.previews.filter(i=>!t.mediaType.previews.includes(i)).concat(t.mediaType.previews)),t.mediaType.previews=t.mediaType.previews.map(i=>i.replace(/-preview/,"")),t}function C(o,l){const r=/\?/.test(o)?"&":"?",t=Object.keys(l);return t.length===0?o:o+r+t.map(i=>i==="q"?"q="+l.q.split("+").map(encodeURIComponent).join("+"):`${i}=${encodeURIComponent(l[i])}`).join("&")}const b=/\{[^}]+\}/g;function R(o){return o.replace(/^\W+|\W+$/g,"").split(/,/)}function j(o){const l=o.match(b);return l?l.map(R).reduce((r,t)=>r.concat(t),[]):[]}function L(o,l){return Object.keys(o).filter(r=>!l.includes(r)).reduce((r,t)=>(r[t]=o[t],r),{})}function H(o){return o.split(/(%[0-9A-Fa-f]{2})/g).map(function(l){return/%[0-9A-Fa-f]/.test(l)||(l=encodeURI(l).replace(/%5B/g,"[").replace(/%5D/g,"]")),l}).join("")}function F(o){return encodeURIComponent(o).replace(/[!'()*]/g,function(l){return"%"+l.charCodeAt(0).toString(16).toUpperCase()})}function q(o,l,r){return l=o==="+"||o==="#"?H(l):F(l),r?F(r)+"="+l:l}function I(o){return o!=null}function V(o){return o===";"||o==="&"||o==="?"}function B(o,l,r,t){var i=o[r],d=[];if(I(i)&&i!=="")if(typeof i=="string"||typeof i=="number"||typeof i=="boolean")i=i.toString(),t&&t!=="*"&&(i=i.substring(0,parseInt(t,10))),d.push(q(l,i,V(l)?r:""));else if(t==="*")Array.isArray(i)?i.filter(I).forEach(function(u){d.push(q(l,u,V(l)?r:""))}):Object.keys(i).forEach(function(u){I(i[u])&&d.push(q(l,i[u],u))});else{const u=[];Array.isArray(i)?i.filter(I).forEach(function(e){u.push(q(l,e))}):Object.keys(i).forEach(function(e){I(i[e])&&(u.push(F(e)),u.push(q(l,i[e].toString())))}),V(l)?d.push(F(r)+"="+u.join(",")):u.length!==0&&d.push(u.join(","))}else l===";"?I(i)&&d.push(F(r)):i===""&&(l==="&"||l==="?")?d.push(F(r)+"="):i===""&&d.push("");return d}function te(o){return{expand:M.bind(null,o)}}function M(o,l){var r=["+","#",".","/",";","?","&"];return o.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(t,i,d){if(i){let e="";const s=[];if(r.indexOf(i.charAt(0))!==-1&&(e=i.charAt(0),i=i.substr(1)),i.split(/,/g).forEach(function(c){var p=/([^:\*]*)(?::(\d+)|(\*))?/.exec(c);s.push(B(l,e,p[1],p[2]||p[3]))}),e&&e!=="+"){var u=",";return e==="?"?u="&":e!=="#"&&(u=e),(s.length!==0?e:"")+s.join(u)}else return s.join(",")}else return H(d)})}function W(o){let l=o.method.toUpperCase(),r=(o.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),t=Object.assign({},o.headers),i,d=L(o,["method","baseUrl","url","headers","request","mediaType"]);const u=j(r);r=te(r).expand(d),/^http/.test(r)||(r=o.baseUrl+r);const e=Object.keys(o).filter(p=>u.includes(p)).concat("baseUrl"),s=L(d,e);if(!/application\/octet-stream/i.test(t.accept)&&(o.mediaType.format&&(t.accept=t.accept.split(/,/).map(p=>p.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${o.mediaType.format}`)).join(",")),o.mediaType.previews.length)){const p=t.accept.match(/[\w-]+(?=-preview)/g)||[];t.accept=p.concat(o.mediaType.previews).map(a=>{const h=o.mediaType.format?`.${o.mediaType.format}`:"+json";return`application/vnd.github.${a}-preview${h}`}).join(",")}return["GET","HEAD"].includes(l)?r=C(r,s):"data"in s?i=s.data:Object.keys(s).length?i=s:t["content-length"]=0,!t["content-type"]&&typeof i!="undefined"&&(t["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(l)&&typeof i=="undefined"&&(i=""),Object.assign({method:l,url:r,headers:t},typeof i!="undefined"?{body:i}:null,o.request?{request:o.request}:null)}function K(o,l,r){return W(G(o,l,r))}function Q(o,l){const r=G(o,l),t=K.bind(null,r);return Object.assign(t,{DEFAULTS:r,defaults:Q.bind(null,r),merge:G.bind(null,r),parse:W})}const oe=`octokit-endpoint.js/6.0.12 ${(0,k.i)()}`,J=Q(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":oe},mediaType:{format:"",previews:[]}});/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */function X(o){return Object.prototype.toString.call(o)==="[object Object]"}function $(o){var l,r;return X(o)===!1?!1:(l=o.constructor,l===void 0?!0:(r=l.prototype,!(X(r)===!1||r.hasOwnProperty("isPrototypeOf")===!1)))}var n=w(34911),T=w.n(n),m=w(29717);const g="5.6.3";function E(o){return o.arrayBuffer()}function v(o){const l=o.request&&o.request.log?o.request.log:console;($(o.body)||Array.isArray(o.body))&&(o.body=JSON.stringify(o.body));let r={},t,i;return(o.request&&o.request.fetch||T())(o.url,Object.assign({method:o.method,body:o.body,headers:o.headers,redirect:o.redirect},o.request)).then(async u=>{i=u.url,t=u.status;for(const e of u.headers)r[e[0]]=e[1];if("deprecation"in r){const e=r.link&&r.link.match(/<([^>]+)>; rel="deprecation"/),s=e&&e.pop();l.warn(`[@octokit/request] "${o.method} ${o.url}" is deprecated. It is scheduled to be removed on ${r.sunset}${s?`. See ${s}`:""}`)}if(!(t===204||t===205)){if(o.method==="HEAD"){if(t<400)return;throw new m.RequestError(u.statusText,t,{response:{url:i,status:t,headers:r,data:void 0},request:o})}if(t===304)throw new m.RequestError("Not modified",t,{response:{url:i,status:t,headers:r,data:await z(u)},request:o});if(t>=400){const e=await z(u);throw new m.RequestError(N(e),t,{response:{url:i,status:t,headers:r,data:e},request:o})}return z(u)}}).then(u=>({status:t,url:i,headers:r,data:u})).catch(u=>{throw u instanceof m.RequestError?u:new m.RequestError(u.message,500,{request:o})})}async function z(o){const l=o.headers.get("content-type");return/application\/json/.test(l)?o.json():!l||/^text\/|charset=utf-8$/.test(l)?o.text():E(o)}function N(o){return typeof o=="string"?o:"message"in o?Array.isArray(o.errors)?`${o.message}: ${o.errors.map(JSON.stringify).join(", ")}`:o.message:`Unknown error: ${JSON.stringify(o)}`}function Y(o,l){const r=o.defaults(l);return Object.assign(function(i,d){const u=r.merge(i,d);if(!u.request||!u.request.hook)return v(r.parse(u));const e=(s,c)=>v(r.parse(r.merge(s,c)));return Object.assign(e,{endpoint:r,defaults:Y.bind(null,r)}),u.request.hook(e,u)},{endpoint:r,defaults:Y.bind(null,r)})}const ae=Y(J,{headers:{"user-agent":`octokit-request.js/${g} ${(0,k.i)()}`}})},89393:function(ce,P,w){w.d(P,{v:function(){return l}});var O=w(7502),D=w(93222),k=w(85329);const f="4.8.0";function A(r){return`Request failed due to following response errors:
`+r.errors.map(t=>` - ${t.message}`).join(`
`)}class y extends Error{constructor(t,i,d){super(A(d)),this.request=t,this.headers=i,this.response=d,this.name="GraphqlResponseError",this.errors=d.errors,this.data=d.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}}const G=["method","baseUrl","url","headers","request","query","mediaType"],C=["query","method","url"],b=/\/api\/v3\/?$/;function R(r,t,i){if(i){if(typeof t=="string"&&"query"in i)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const s in i)if(!!C.includes(s))return Promise.reject(new Error(`[@octokit/graphql] "${s}" cannot be used as variable name`))}const d=typeof t=="string"?Object.assign({query:t},i):t,u=Object.keys(d).reduce((s,c)=>G.includes(c)?(s[c]=d[c],s):(s.variables||(s.variables={}),s.variables[c]=d[c],s),{}),e=d.baseUrl||r.endpoint.DEFAULTS.baseUrl;return b.test(e)&&(u.url=e.replace(b,"/api/graphql")),r(u).then(s=>{if(s.data.errors){const c={};for(const p of Object.keys(s.headers))c[p]=s.headers[p];throw new y(u,c,s.data)}return s.data.data})}function j(r,t){const i=r.defaults(t);return Object.assign((u,e)=>R(i,u,e),{defaults:j.bind(null,i),endpoint:k.request.endpoint})}const L=j(k.request,{headers:{"user-agent":`octokit-graphql.js/${f} ${(0,O.i)()}`},method:"POST",url:"/graphql"});function H(r){return j(r,{method:"POST",url:"/graphql"})}const F=/^v1\./,q=/^ghs_/,I=/^ghu_/;async function V(r){const t=r.split(/\./).length===3,i=F.test(r)||q.test(r),d=I.test(r);return{type:"token",token:r,tokenType:t?"app":i?"installation":d?"user-to-server":"oauth"}}function B(r){return r.split(/\./).length===3?`bearer ${r}`:`token ${r}`}async function te(r,t,i,d){const u=t.endpoint.merge(i,d);return u.headers.authorization=B(r),t(u)}const M=function(t){if(!t)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof t!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return t=t.replace(/^(token|bearer) +/i,""),Object.assign(V.bind(null,t),{hook:te.bind(null,t)})},W="3.6.0";class K{constructor(t={}){const i=new D.Collection,d={baseUrl:k.request.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},t.request,{hook:i.bind(null,"request")}),mediaType:{previews:[],format:""}};if(d.headers["user-agent"]=[t.userAgent,`octokit-core.js/${W} ${(0,O.i)()}`].filter(Boolean).join(" "),t.baseUrl&&(d.baseUrl=t.baseUrl),t.previews&&(d.mediaType.previews=t.previews),t.timeZone&&(d.headers["time-zone"]=t.timeZone),this.request=k.request.defaults(d),this.graphql=H(this.request).defaults(d),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},t.log),this.hook=i,t.authStrategy){const{authStrategy:e,...s}=t,c=e(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:s},t.auth));i.wrap("request",c.hook),this.auth=c}else if(!t.auth)this.auth=async()=>({type:"unauthenticated"});else{const e=M(t.auth);i.wrap("request",e.hook),this.auth=e}this.constructor.plugins.forEach(e=>{Object.assign(this,e(this,t))})}static defaults(t){return class extends this{constructor(...d){const u=d[0]||{};if(typeof t=="function"){super(t(u));return}super(Object.assign({},t,u,u.userAgent&&t.userAgent?{userAgent:`${u.userAgent} ${t.userAgent}`}:null))}}}static plugin(...t){var i;const d=this.plugins;return i=class extends this{},i.plugins=d.concat(t.filter(e=>!d.includes(e))),i}}K.VERSION=W,K.plugins=[];const Q="1.0.4";function ee(r){r.hook.wrap("request",(t,i)=>{r.log.debug("request",i);const d=Date.now(),u=r.request.endpoint.parse(i),e=u.url.replace(i.baseUrl,"");return t(i).then(s=>(r.log.info(`${u.method} ${e} - ${s.status} in ${Date.now()-d}ms`),s)).catch(s=>{throw r.log.info(`${u.method} ${e} - ${s.status} in ${Date.now()-d}ms`),s})})}ee.VERSION=Q;const oe="2.17.0";function ie(r){if(!r.data)return{...r,data:[]};if(!("total_count"in r.data&&!("url"in r.data)))return r;const i=r.data.incomplete_results,d=r.data.repository_selection,u=r.data.total_count;delete r.data.incomplete_results,delete r.data.repository_selection,delete r.data.total_count;const e=Object.keys(r.data)[0],s=r.data[e];return r.data=s,typeof i!="undefined"&&(r.data.incomplete_results=i),typeof d!="undefined"&&(r.data.repository_selection=d),r.data.total_count=u,r}function J(r,t,i){const d=typeof t=="function"?t.endpoint(i):r.request.endpoint(t,i),u=typeof t=="function"?t:r.request,e=d.method,s=d.headers;let c=d.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!c)return{done:!0};try{const p=await u({method:e,url:c,headers:s}),a=ie(p);return c=((a.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:a}}catch(p){if(p.status!==409)throw p;return c="",{value:{status:200,headers:{},data:[]}}}}})}}function X(r,t,i,d){return typeof i=="function"&&(d=i,i=void 0),$(r,[],J(r,t,i)[Symbol.asyncIterator](),d)}function $(r,t,i,d){return i.next().then(u=>{if(u.done)return t;let e=!1;function s(){e=!0}return t=t.concat(d?d(u.value,s):u.value.data),e?t:$(r,t,i,d)})}const n=Object.assign(X,{iterator:J}),T=null;function m(r){return typeof r=="string"?T.includes(r):!1}function g(r){return{paginate:Object.assign(X.bind(null,r),{iterator:J.bind(null,r)})}}g.VERSION=oe;const E={actions:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createOrUpdateEnvironmentSecret:["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getEnvironmentPublicKey:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createContentAttachment:["POST /content_references/{content_reference_id}/attachments",{mediaType:{previews:["corsair"]}}],createContentAttachmentForRepo:["POST /repos/{owner}/{repo}/content_references/{content_reference_id}/attachments",{mediaType:{previews:["corsair"]}}],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},emojis:{get:["GET /emojis"]},enterpriseAdmin:{disableSelectedOrganizationGithubActionsEnterprise:["DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],enableSelectedOrganizationGithubActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],getAllowedActionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions/selected-actions"],getGithubActionsPermissionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions"],listSelectedOrganizationsEnabledGithubActionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions/organizations"],setAllowedActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/selected-actions"],setGithubActionsPermissionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions"],setSelectedOrganizationsEnabledGithubActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/organizations"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import"],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors"],getImportStatus:["GET /repos/{owner}/{repo}/import"],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs"],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],updateImport:["PATCH /repos/{owner}/{repo}/import"]},orgs:{blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createWebhook:["POST /orgs/{org}/hooks"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],get:["GET /orgs/{org}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableLfsForRepo:["DELETE /repos/{owner}/{repo}/lfs"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enableLfsForRepo:["PUT /repos/{owner}/{repo}/lfs"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}}],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}}],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics",{mediaType:{previews:["mercy"]}}],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},v="5.13.0";function z(r,t){const i={};for(const[d,u]of Object.entries(t))for(const[e,s]of Object.entries(u)){const[c,p,a]=s,[h,_]=c.split(/ /),S=Object.assign({method:h,url:_},p);i[d]||(i[d]={});const U=i[d];if(a){U[e]=N(r,d,e,S,a);continue}U[e]=r.request.defaults(S)}return i}function N(r,t,i,d,u){const e=r.request.defaults(d);function s(...c){let p=e.endpoint.merge(...c);if(u.mapToData)return p=Object.assign({},p,{data:p[u.mapToData],[u.mapToData]:void 0}),e(p);if(u.renamed){const[a,h]=u.renamed;r.log.warn(`octokit.${t}.${i}() has been renamed to octokit.${a}.${h}()`)}if(u.deprecated&&r.log.warn(u.deprecated),u.renamedParameters){const a=e.endpoint.merge(...c);for(const[h,_]of Object.entries(u.renamedParameters))h in a&&(r.log.warn(`"${h}" parameter is deprecated for "octokit.${t}.${i}()". Use "${_}" instead`),_ in a||(a[_]=a[h]),delete a[h]);return e(a)}return e(...c)}return Object.assign(s,e)}function Y(r){return{rest:z(r,E)}}Y.VERSION=v;function ae(r){const t=z(r,E);return{...t,rest:t}}ae.VERSION=v;const o="18.12.0",l=K.plugin(ee,ae,g).defaults({userAgent:`octokit-rest.js/${o}`})}}]);})();

//# sourceMappingURL=module-octokit.38832b3d.js.map